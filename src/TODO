1 - forks na main
2 - query4
3 - variável global faturacao
4 - verificação query 2 (maiuscula ou minuscula)
5-  carregamento


6 - documentação produto
7 - documentação avl
8 - documentação cliente


void query11(char cliente){
    int i;
    system("clear");
    carregaArt("LOGO.txt");
    printf("|-------------------------------------Query 11--------------------------------------------|\n\n");
    

    char * produto[3];
    double * valor[3];
        
    carregaMaxValor (1, cliente, &produto, &valor);
    carregaMaxValor (2, cliente, &produto, &valor);
    carregaMaxValor (3, cliente, &produto, &valor);

    for (i=0; i<3; i++)
        printf("%s\n", produto[i]);

        printf("(Prima ENTER para voltar ao menu)\n");
        getchar();
        getchar();
        return;
    }

    void carregaMaxValor (int filial, char * cliente, char * * * produtos, double * * valor){
        int i;
        double aux;
        nodoFilial nodo;
        if(filial ==1) nodo=filial1;
        if(filial ==2) nodo=filial2;
        if(filial ==3) nodo=filial3;

        if(nodo==NULL) return;
        if((nodo=procuraPFilial(nodo, cliente))!=NULL)
            for(i=0; i<nodo->cliente->nVendas; i++){
                aux=nodo->cliente->vendas[i].qtd*nodo->cliente->vendas[i].preco;
                for (i = 0; i < 3; ++i){
                    if (nodo->cliente->vendas[i].produto=produto[i])
                        valor[i]+=aux;
                    else{
                        if (aux>valor[i]){
                            if (i==2) {
                                valor[2]=aux;
                                produto[2]=nodo->cliente->vendas[i].produto;
                            }
                            if (i==1) {
                                valor[2]=valor[1];
                                produto[2]=produto[1];
                                valor[1]=aux;
                                produto[1]=nodo->cliente->vendas[i].produto;
                            }
                            if (i==0) {
                                valor[2]=valor[1];
                                produto[2]=produto[1];
                                valor[1]=valor[0];
                                produto[1]=produto[0];
                                valor[0]=aux;
                                produto[0]=nodo->cliente->vendas[i].produto;
                            }
                        }
                    }
                }
            }
    }






void query12(){
    int i, tot, t=0;
    system("clear");
    carregaArt("LOGO.txt");
    printf("|-------------------------------------Query 12--------------------------------------------|\n\n");
    

/*
1- juntar todos os clientes das filiais 1 a 3 numa árvores
2- cruzar o catálogo de clientes com essa arvore e determinar os que não constam

2a parte- query4 (total prods não comprados)
*/

    
    
    printf("Clientes que não realizaram qualquer compra: %d\n", t);
    printf("Total de produtos que nenhum cliente comprou: %d\n", tot);

        printf("(Prima ENTER para voltar ao menu)\n");
        getchar();
        getchar();
        return;
    }



    void query10(int n){
    int i, t=0;
    system("clear");
    carregaArt("LOGO.txt");
    printf("|-------------------------------------Query 10--------------------------------------------|\n\n");
    


/*
1- calcular com o módulo faturação os N mais vendidos
2- fazer uma arvore da filial 1 com produto, nº clientes e qtd
3- para cada mais vendido consultar a arvore criada
4-repetir passo 2 e 3 para as restantes filiais. 
*/


    char * produtos[n];
    int * qtd[n];
    int * informacao[n][6];
    /*
    cada indice da linha refere-se ao produto com o mm indice em "produtos"
    coluna 1 - qtd vendida filial1
    coluna 2 - nº clientes que compraram o prod na filial1
    colunas 3 a 6 - o mm que 1 e 2 para as filiais 2 e 3
    */

    for (int i = 0; i < n; ++i)
    {
        qtd[i]=0;
    }

    preencheProdutos (&produtos, &qtd, n);
    preencheInformaQtdFilial (1, &produtos, &informacao, n);
    preencheInformaQtdFilial (2, &produtos, &informacao, n);
    preencheInformaQtdFilial (3, &produtos, &informacao, n);



    
    printf("%d\n", t);
    for (i=0; i<t; i++)
        printf("%s\n", cliente[i]);

        printf("(Prima ENTER para voltar ao menu)\n");
        getchar();
        getchar();
        return;
    }


void preencheProdutos (char * * * produtos, char * * * qtd, int n){
    int i, aux;
    nodoFaturacaoProduto nodo;
    nodo=tabela[3][12];


    if(nodo==NULL) return;
    else
        aux=nodo->produto->qtdNormal+nodo->produto->qtdNormal;
        if(aux>qtd[n-1]){
            produtos[n-1]=nodo->produto;
            qtd[n-1]=aux;
            for (i = n-2; i >= 0 && qtd[i]<qtd[i+1]; i--)
            {
                swap (produtos[i], produtos[i+1]);
                swap (qtd[i], qtd[i+1]);
            }
        }

}

void preencheInformaQtd (int filial, char * * * produtos, char * * * informacao, n){
    int i;
    nodoFaturacaoProduto nodo;
    nodo=tabela[filial-1][12];
    for (i = 0; i < n; ++i)
        {
            nodo=searchProduto(nodo,produtos->produto);
            informacao[i][filial*2-1]=nodo->produto->qtdNormal+nodo->produto->qtdNormal;
        }   
} 